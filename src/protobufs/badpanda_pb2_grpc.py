# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import badpanda_pb2 as badpanda__pb2


class BadpandaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchBadpandas = channel.unary_stream(
                '/blueintel.badapi.badpanda.BadpandaService/SearchBadpandas',
                request_serializer=badpanda__pb2.BadpandaSearchRequest.SerializeToString,
                response_deserializer=badpanda__pb2.BadpandaSearchResponse.FromString,
                )
        self.SearchByDomain = channel.unary_stream(
                '/blueintel.badapi.badpanda.BadpandaService/SearchByDomain',
                request_serializer=badpanda__pb2.SearchByDomainRequest.SerializeToString,
                response_deserializer=badpanda__pb2.BadpandaSearchResponse.FromString,
                )
        self.SearchByIP = channel.unary_stream(
                '/blueintel.badapi.badpanda.BadpandaService/SearchByIP',
                request_serializer=badpanda__pb2.SearchByIPRequest.SerializeToString,
                response_deserializer=badpanda__pb2.BadpandaSearchResponse.FromString,
                )


class BadpandaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchBadpandas(self, request, context):
        """SearchBadpandas searches for org related mimicked domains
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchByDomain(self, request, context):
        """SearchByDomain searches badpandas for records matching a domain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchByIP(self, request, context):
        """SearchByIP searches badpandas for records matching an IP address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BadpandaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchBadpandas': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchBadpandas,
                    request_deserializer=badpanda__pb2.BadpandaSearchRequest.FromString,
                    response_serializer=badpanda__pb2.BadpandaSearchResponse.SerializeToString,
            ),
            'SearchByDomain': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchByDomain,
                    request_deserializer=badpanda__pb2.SearchByDomainRequest.FromString,
                    response_serializer=badpanda__pb2.BadpandaSearchResponse.SerializeToString,
            ),
            'SearchByIP': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchByIP,
                    request_deserializer=badpanda__pb2.SearchByIPRequest.FromString,
                    response_serializer=badpanda__pb2.BadpandaSearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blueintel.badapi.badpanda.BadpandaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BadpandaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchBadpandas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/blueintel.badapi.badpanda.BadpandaService/SearchBadpandas',
            badpanda__pb2.BadpandaSearchRequest.SerializeToString,
            badpanda__pb2.BadpandaSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchByDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/blueintel.badapi.badpanda.BadpandaService/SearchByDomain',
            badpanda__pb2.SearchByDomainRequest.SerializeToString,
            badpanda__pb2.BadpandaSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchByIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/blueintel.badapi.badpanda.BadpandaService/SearchByIP',
            badpanda__pb2.SearchByIPRequest.SerializeToString,
            badpanda__pb2.BadpandaSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
